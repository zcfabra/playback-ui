// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Frame from "./Frame.res.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Playback from "./Playback.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var match = React.useState(function () {
        
      });
  var setFileContent = match[1];
  var fileContent = match[0];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setSelectedIx = match$1[1];
  var selectedIx = match$1[0];
  var handleKeyDown = function (e, maxBounds) {
    var match = e.key;
    switch (match) {
      case "ArrowLeft" :
          return setSelectedIx(function (prev) {
                      return Math.max(prev - 1 | 0, 0);
                    });
      case "ArrowRight" :
          return setSelectedIx(function (prev) {
                      return Math.min(prev + 1 | 0, maxBounds);
                    });
      default:
        return ;
    }
  };
  React.useEffect((function () {
          if (fileContent === undefined) {
            return ;
          }
          var maxBounds = fileContent.stack.length - 1 | 0;
          window.addEventListener("keydown", (function (e) {
                  handleKeyDown(e, maxBounds);
                }));
          return (function () {
                    window.removeEventListener("keydown", (function (e) {
                            handleKeyDown(e, maxBounds);
                          }));
                  });
        }), [fileContent]);
  var handleFile = function (e) {
    var file_list = e.currentTarget.files;
    var f = file_list[0];
    if (f !== undefined) {
      var f$1 = Caml_option.valFromOption(f);
      var reader = new FileReader();
      reader.onload = (function () {
          var result = reader.result;
          if (result == null) {
            return ;
          }
          var val = Playback.Playback.parsePlayback(JSON.parse(result));
          if (val.TAG !== "Ok") {
            return ;
          }
          var val$1 = val._0;
          setFileContent(function (param) {
                return val$1;
              });
        });
      reader.readAsText(f$1);
      return ;
    }
    
  };
  var tmp;
  if (fileContent !== undefined) {
    var els = Js_dict.entries(fileContent.stack[selectedIx].local_vars).map(function (param) {
          return JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("span", {
                              children: param[0] + ": "
                            }),
                        JsxRuntime.jsx("span", {
                              children: JSON.stringify(param[1])
                            })
                      ],
                      className: "px-4 text-zinc-300"
                    });
        });
    var rv = fileContent.stack[selectedIx].return_val;
    var tmp$1;
    tmp$1 = rv !== undefined && !(!Array.isArray(rv) && (rv === null || typeof rv !== "object") && typeof rv !== "number" && typeof rv !== "string" && typeof rv !== "boolean") ? JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("span", {
                    children: "return_val: "
                  }),
              JsxRuntime.jsx("span", {
                    children: JSON.stringify(rv)
                  })
            ],
            className: "px-4 text-zinc-300"
          }) : JsxRuntime.jsx(JsxRuntime.Fragment, {});
    els.push(tmp$1);
    tmp = JsxRuntime.jsx("div", {
          children: els,
          className: "w-3/12 h-36 absolute bottom-8 right-8 bg-zinc-800 rounded-xl"
        });
  } else {
    tmp = JsxRuntime.jsx(JsxRuntime.Fragment, {});
  }
  var tmp$2;
  if (fileContent !== undefined) {
    var code = Js_dict.get(fileContent.files, fileContent.stack[selectedIx].file_name);
    tmp$2 = code !== undefined ? code.split("\n").map(function (el, ix) {
            return JsxRuntime.jsxs(React.Fragment, {
                        children: [
                          JsxRuntime.jsx("span", {
                                children: el,
                                className: ix === (fileContent.stack[selectedIx].line_no - 1 | 0) ? "bg-red-500" : ""
                              }),
                          JsxRuntime.jsx("br", {})
                        ]
                      }, String(ix));
          }) : JsxRuntime.jsx("span", {
            children: ""
          });
  } else {
    tmp$2 = JsxRuntime.jsx(JsxRuntime.Fragment, {});
  }
  return JsxRuntime.jsxs("div", {
              children: [
                fileContent !== undefined ? JsxRuntime.jsx(JsxRuntime.Fragment, {}) : JsxRuntime.jsx("input", {
                        type: "file",
                        onChange: handleFile
                      }),
                JsxRuntime.jsxs("div", {
                      children: [
                        tmp,
                        JsxRuntime.jsx("div", {
                              children: fileContent !== undefined ? fileContent.stack.map(function (el, ix) {
                                      return JsxRuntime.jsx(Frame.make, {
                                                  frame: el,
                                                  isSelected: ix === selectedIx
                                                });
                                    }) : JsxRuntime.jsx(JsxRuntime.Fragment, {}),
                              className: "w-4/12 flex flex-col"
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("pre", {
                                    children: tmp$2,
                                    className: "text-zinc-300 w-full"
                                  }),
                              className: "w-8/12 text-zinc-300 px-8"
                            })
                      ],
                      className: "w-full flex"
                    })
              ],
              className: "h-screen w-full p-6 bg-zinc-900 fixed"
            });
}

var make = App;

export {
  make ,
}
/* Frame Not a pure module */
